@using dailies.Shared

<table class="calendar-table table table-bordered">
    <thead>
        <tr>
            <th class="text-danger text-center">
                S<span class="d-none d-md-inline">unday</span>
            </th>
            <th class="text-center">
                M<span class="d-none d-md-inline">onday</span>
            </th>
            <th class="text-center">
                T<span class="d-none d-md-inline">uesday</span>
            </th>
            <th class="text-center">
                W<span class="d-none d-md-inline">ednesday</span>
            </th>
            <th class="text-center">
                T<span class="d-none d-md-inline">hursday</span>
            </th>
            <th class="text-center">
                F<span class="d-none d-md-inline">riday</span>
            </th>
            <th class="text-primary text-center">
                S<span class="d-none d-md-inline">aturday</span>
            </th>
        </tr>
    </thead>
    <tbody>
        @{
            if (CurrentYear != 0 && CurrentMonth != 0) {
                var firstDayOfMonth = new DateTime(CurrentYear, CurrentMonth, 1);
                var dayOfWeekOfFirstDay = firstDayOfMonth.DayOfWeek;
                // We display up to 6 days of previous month 
                // depending on which day of week first day of this month is
                var dayToDisplay = firstDayOfMonth.AddDays((int)dayOfWeekOfFirstDay * -1);

                while (dayToDisplay.Year < CurrentYear || (dayToDisplay.Year == CurrentYear && dayToDisplay.Month <= CurrentMonth)) {
                    <tr>
                        @for (int i = 0; i < 7; i++)
                        {
                            var date = dayToDisplay.AddDays(i);
                            var isOfCurrentMonth = date.Year == CurrentYear && date.Month == CurrentMonth;
                            var entry = GetEntryForDate(date);
                            var dataLoaded = FetchedMonths.Any(x => x.year == CurrentYear && x.month == CurrentMonth);
                            var isWeekend = i == 0 || i == 6;
                            <CalendarTableCell 
                                Date="@date" 
                                IsOfCurrentMonth="@isOfCurrentMonth" 
                                Entry="@entry" 
                                IsLoading="@(!dataLoaded)" 
                                TdClass="@(isWeekend ? "table-light" : "")"
                            />
                        }
                    </tr>
                    dayToDisplay = dayToDisplay.AddDays(7);
                }
            }                    
        }
    </tbody>
</table>

@code {
    [Parameter]
    public int CurrentMonth { get; set; }
    [Parameter]
    public int CurrentYear { get; set; }
    [Parameter]
    public List<(int year, int month)> FetchedMonths { get; set; }

    [Parameter]
    public Dictionary<DateTime, Entry> Contents { get; set; }

    private Entry GetEntryForDate(DateTime date) {
        if (Contents.ContainsKey(date)) return Contents[date];
        return null;
    }
}