@page "/calendar"
@using System.Globalization
@using dailies.Shared

@inject HttpClient Http

<div class="calendar">
    <div class="command-bar">
        <div class="form-row">
            <div class="col-auto">
                <button type="button" class="btn btn-light btn-lg mt-3" @onclick="@(e => currentMonth--)">&#60;</button>
            </div>
            <div class="col">
                <input type="number" class="header form-control-plaintext font-weight-bolder" id="calendar-year" @bind="@currentYear">
            </div>
            <div class="col">
                <select id="inputState" class="form-control-plaintext" @bind="@currentMonth">
                    @for (int i = 1; i <= 12; i++)
                    {
                        var name = DateTimeFormatInfo.CurrentInfo.GetMonthName(i);
                        <option value="@i">@name</option>
                    }
                </select>
            </div>
            <div class="col-auto">
                <button type="button" class="btn btn-light btn-lg mt-3" @onclick="@(e => currentMonth++)">&#62;</button>
            </div>
        </div>
    </div>

    <div>
        <CalendarTable CurrentMonth="@currentMonth" CurrentYear="@currentYear" Contents="@Contents" FetchedMonths="@FetchedMonths" />
    </div>
</div>

@code {
    private int _currentYear = 0;
    private int currentYear {
        get {
            return _currentYear;
        }
        set {
            _currentYear = value;
            TriggerCalendarUpdateAsync();
        }
    }
    private int _currentMonth = 0;
    private int currentMonth { 
        get {
            return _currentMonth;
        }
        set {
            _currentMonth = value;
            if (_currentMonth == 13) {
                _currentYear += 1;
                _currentMonth = 1;
            }
            else if (_currentMonth == 0 && _currentYear != 0) {
                _currentYear -= 1;
                _currentMonth = 12;
            }
            TriggerCalendarUpdateAsync();
        }
     }

    private List<(int year, int month)> FetchedMonths { get; set; } = new List<(int year, int month)>();
    private Dictionary<DateTime, Entry> Contents { get; set; } = new Dictionary<DateTime, Entry>();

    protected override async Task OnInitializedAsync()
    {
        currentYear = DateTime.Today.Year;
        currentMonth = DateTime.Today.Month;
    }

    private async Task TriggerCalendarUpdateAsync() {
        if (currentYear == 0 || currentMonth == 0) return;
        await GetContentsToDisplayForMonthAsync(currentYear, currentMonth);
        StateHasChanged();
    }

    /// Fetch data for given month and adjacent ones
    private async Task GetContentsToDisplayForMonthAsync(int year, int month)
    {
        await FetchContentsForMonthAsync(year, month);

        // Query adjacent months in after current one is finished
        var now = new DateTime(year, month, 1);
        var prevMonth = now.AddMonths(-1);
        var nextMonth = now.AddMonths(1);
        var prevMonthTask = FetchContentsForMonthAsync(prevMonth.Year, prevMonth.Month);
        var nextMonthTask = FetchContentsForMonthAsync(nextMonth.Year, nextMonth.Month);

        await Task.WhenAll(prevMonthTask, nextMonthTask);                
    }

    private async Task FetchContentsForMonthAsync(int year, int month) {

        // Do nothing if we have previously fetched that data
        if (FetchedMonths.Any(x => x.year == year && x.month == month)) return;
        
        var fetchedData = await Http.GetFromJsonAsync<Entry[]>($"Entries?year={year}&month={month}");        
        foreach (var entry in fetchedData)
        {
            Contents.Add(entry.Date.Date, entry);
        }

        // Mark as fetched
        FetchedMonths.Add((year, month));
    }
}
