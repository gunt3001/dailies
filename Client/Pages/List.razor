@page "/list"
@using dailies.Shared
@using Models
@inject DateUtilities DateUtilities
@inject EntriesManager EntriesManager

<div class="row">
    <div class="col">
        <div class="pt-3">
            <div class="table-responsive">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Day</th>
                            <th>Content</th>
                            <th>Keyword</th>
                            <th>Mood</th>
                            <th>Remarks</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Entries == null)
                        {
                            <tr>
                                <td colspan="6" class="text-center">
                                    <div class="spinner-border" role="status">
                                        <span class="sr-only">Loading...</span>
                                    </div>
                                </td>
                            </tr>
                        }
                        else if (Entries.Count == 0)
                        {
                            <tr>
                                <td colspan="6" class="text-center">
                                    No entries found in current month. Try loading more.
                                </td>
                            </tr>
                        }
                        else
                        {
                            foreach (var entry in Entries)
                            {
                                <tr @key="@entry.date">
                                    <td>
                                        <a href="@($"/entry/{DateUtilities.GetStandardShortDate(entry.date)}")" class="text-dark">
                                            <span>@entry.date.ToShortDateString()</span><br />
                                            <i>@DateUtilities.GetRelativeDateFromToday(entry.date.Date)</i>
                                        </a>
                                        
                                    </td>
                                    <td>@entry.date.ToString("ddd")</td>
                                    <td>
                                        @if (entry.entry == null)
                                        {
                                            <i class="text-muted">No entry</i>
                                        }
                                        else
                                        {
                                            @entry.entry.Content
                                        }
                                    </td>
                                    <td>@entry.entry?.Keyword</td>
                                    <td>@entry.entry?.Mood</td>
                                    <td class="preserve-linebreak">@entry.entry?.Remarks</td>
                                </tr>
                            }
                        }
                        
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
<div class="row justify-content-center">
    <div class="col-auto">
        <button type="button" class="btn btn-outline-primary" @onclick="@OnLoadMoreClick" disabled="@IsLoading">Load More...</button>
    </div>
</div>


@code
{
    private DateTime OldestDisplayedMonth { get; set; }
    private List<(DateTime date, Entry entry)> Entries { get; set; }
    private bool IsLoading { get; set; }

    protected override async Task OnInitializedAsync()
    {
        OldestDisplayedMonth = DateTime.Today;
        await DisplayEntriesAsync();
    }

    // Fetch and display the entries for current month
    private async Task DisplayEntriesAsync()
    {
        IsLoading = true;
        var newEntries = new List<(DateTime date, Entry entry)>();
        var hasPreviousValidEntry = Entries != null && Entries.Any(x => x.entry != null);

        // Get data for each day in current month
        for (var day = DateTime.DaysInMonth(OldestDisplayedMonth.Year, OldestDisplayedMonth.Month); day > 0; day--)
        {
            var dateForEntry = new DateTime(OldestDisplayedMonth.Year, OldestDisplayedMonth.Month, day);
            var entry = await EntriesManager.GetEntryAsync(dateForEntry);

            if (entry == null && !hasPreviousValidEntry)
            {
                // Skip adding valid entry if we don't have any entry in the list yet
                // This will prevent empty entries appearing on top.
                continue;
            }

            newEntries.Add((dateForEntry, entry));
        }

        if (Entries == null)
        {
            Entries = newEntries;
        }
        else
        {
            Entries.AddRange(newEntries);
        }
        IsLoading = false;
    }

    private async Task OnLoadMoreClick()
    {
        if (IsLoading) return;
        OldestDisplayedMonth = OldestDisplayedMonth.AddMonths(-1);
        await DisplayEntriesAsync();
    }
}